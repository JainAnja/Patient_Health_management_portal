/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.project.ui.pharmacy;

import com.project.constants.WorkRequestStatus;
import com.project.ecosystem.Ecosystem;
import com.project.enterprise.Enterprise;
import com.project.insurance.Insurance;
import com.project.insurance.InsuranceEnterprise;
import com.project.network.Network;
import com.project.organization.Organization;
import com.project.patient.PatientProfile;
import com.project.prescription.Prescription;
import com.project.useraccount.UserAccount;
import com.project.utils.Validation;
import com.project.workqueue.InsuranceClaimWorkRequest;
import com.project.workqueue.PrescriptionWorkRequest;
import com.project.workqueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bhavinbhatia
 */
public class PharmacistWorkAreaPanel extends javax.swing.JPanel {

    /**
     * Creates new form PharmacistWorkAreaPanel
     */
    private Organization organization;
    private Enterprise pharmacyEnterprise;
    private Ecosystem ecosystem;
    private UserAccount account;
    private PatientProfile selectedPatient;
    PrescriptionWorkRequest prescriptionWorkRequest;
    Insurance insurance;

    public PharmacistWorkAreaPanel(JPanel containerPanel, UserAccount account,
            Organization organization, Enterprise enterprise, Ecosystem ecosystem) {
        initComponents();
        this.organization = organization;
        this.pharmacyEnterprise = enterprise;
        this.ecosystem = ecosystem;

        //populating the work queue for the pharmacist role
        populatePharmacistWorkQueue(account, ecosystem);

    }

    public void populatePharmacistWorkQueue(UserAccount userAccount, Ecosystem ecosystem) {
        DefaultTableModel model = (DefaultTableModel) tblPharmacistWorkQueue.getModel();
        model.setRowCount(0);

        for (WorkRequest workRequest : organization.getWorkQueue().getWorkrequest()) {
            PrescriptionWorkRequest pmwr = (PrescriptionWorkRequest) workRequest;
            Object[] row = new Object[4];
            row[0] = pmwr;
            row[1] = pmwr.getRequestId();
            row[2] = pmwr.getSender().getRole().getRoleType().getValue();
            row[3] = pmwr.getStatus();

            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHospitalId = new javax.swing.JLabel();
        btnViewInvoice = new javax.swing.JButton();
        txtMecine = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaPrescription = new javax.swing.JTextArea();
        txtDocRef = new javax.swing.JTextField();
        txtPatientId = new javax.swing.JTextField();
        btnViewPrescriptions = new javax.swing.JButton();
        txtPharmacyId = new javax.swing.JTextField();
        txtHospitalId = new javax.swing.JTextField();
        lblPharmacyId = new javax.swing.JLabel();
        lblMedicine = new javax.swing.JLabel();
        lblDocRef = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPharmacistWorkQueue = new javax.swing.JTable();
        lblPatientId = new javax.swing.JLabel();
        lblAmount = new javax.swing.JLabel();
        txtAmount = new javax.swing.JTextField();
        btnSendRequest = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(174, 14, 54), 5), "Welcome Pharmacist", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 18), new java.awt.Color(174, 14, 54))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1050, 800));

        lblHospitalId.setBackground(new java.awt.Color(3, 4, 94));
        lblHospitalId.setForeground(new java.awt.Color(174, 14, 54));
        lblHospitalId.setText("Hospital Id:");

        btnViewInvoice.setBackground(new java.awt.Color(174, 14, 54));
        btnViewInvoice.setForeground(new java.awt.Color(255, 255, 255));
        btnViewInvoice.setText("View Invoice ");
        btnViewInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewInvoiceActionPerformed(evt);
            }
        });

        txtMecine.setEditable(false);

        txtAreaPrescription.setEditable(false);
        txtAreaPrescription.setBackground(new java.awt.Color(204, 204, 204));
        txtAreaPrescription.setColumns(20);
        txtAreaPrescription.setRows(5);
        txtAreaPrescription.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 153, 153), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 51, 51), new java.awt.Color(255, 0, 51)));
        jScrollPane2.setViewportView(txtAreaPrescription);

        txtDocRef.setEditable(false);

        txtPatientId.setEditable(false);
        txtPatientId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientIdActionPerformed(evt);
            }
        });

        btnViewPrescriptions.setBackground(new java.awt.Color(174, 14, 54));
        btnViewPrescriptions.setForeground(new java.awt.Color(255, 255, 255));
        btnViewPrescriptions.setText("View Prescription");
        btnViewPrescriptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewPrescriptionsActionPerformed(evt);
            }
        });

        txtPharmacyId.setEditable(false);
        txtPharmacyId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPharmacyIdActionPerformed(evt);
            }
        });

        txtHospitalId.setEditable(false);

        lblPharmacyId.setBackground(new java.awt.Color(3, 4, 94));
        lblPharmacyId.setForeground(new java.awt.Color(174, 14, 54));
        lblPharmacyId.setText("Pharmacy Id:");

        lblMedicine.setBackground(new java.awt.Color(3, 4, 94));
        lblMedicine.setForeground(new java.awt.Color(174, 14, 54));
        lblMedicine.setText("Medicine: ");

        lblDocRef.setBackground(new java.awt.Color(3, 4, 94));
        lblDocRef.setForeground(new java.awt.Color(174, 14, 54));
        lblDocRef.setText("Doctor's Reference No:");

        tblPharmacistWorkQueue.setBackground(new java.awt.Color(252, 246, 245));
        tblPharmacistWorkQueue.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tblPharmacistWorkQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Request Id:", "Sender:", "Status:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPharmacistWorkQueue);

        lblPatientId.setBackground(new java.awt.Color(3, 4, 94));
        lblPatientId.setForeground(new java.awt.Color(174, 14, 54));
        lblPatientId.setText("Patient Id:");

        lblAmount.setBackground(new java.awt.Color(3, 4, 94));
        lblAmount.setForeground(new java.awt.Color(174, 14, 54));
        lblAmount.setText("Amount:");

        btnSendRequest.setBackground(new java.awt.Color(174, 14, 54));
        btnSendRequest.setForeground(new java.awt.Color(255, 255, 255));
        btnSendRequest.setText("Send Request To Insurance");
        btnSendRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnViewPrescriptions)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblHospitalId)
                            .addComponent(lblDocRef)
                            .addComponent(lblPatientId)
                            .addComponent(lblPharmacyId)
                            .addComponent(lblMedicine)
                            .addComponent(lblAmount))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtPatientId)
                                .addComponent(txtHospitalId)
                                .addComponent(txtPharmacyId)
                                .addComponent(txtMecine)
                                .addComponent(txtAmount)
                                .addComponent(txtDocRef, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                    .addComponent(btnSendRequest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(59, 59, 59))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAmount, lblDocRef, lblHospitalId, lblMedicine, lblPatientId, lblPharmacyId});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnViewInvoice, btnViewPrescriptions});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSendRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(146, 146, 146)
                                .addComponent(btnViewPrescriptions, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDocRef)
                                    .addComponent(txtDocRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPatientId)
                                    .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHospitalId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblHospitalId))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblPharmacyId)
                                    .addComponent(txtPharmacyId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblMedicine)
                                    .addComponent(txtMecine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblAmount)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(24, 24, 24)
                        .addComponent(btnViewInvoice)))
                .addContainerGap(223, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblAmount, lblDocRef, lblHospitalId, lblMedicine, lblPatientId, lblPharmacyId});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnSendRequest, btnViewInvoice, btnViewPrescriptions});

    }// </editor-fold>//GEN-END:initComponents

    private void btnViewInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewInvoiceActionPerformed
        // TODO add your handling code here:
        
        if(!Validation.validateTextFieldsForAmount(txtAmount)) {
            JOptionPane.showMessageDialog(this, "Amount is invalid", "FORM ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        txtAreaPrescription.setText("");
        txtAreaPrescription.append("**Welcome To Pharmacy**" + ""
                + "\n\n==================================="
                + "\n\n" + "Doctors Ref Number:  " + String.valueOf(txtDocRef.getText())
                + "\n\nPatient Id:  " + String.valueOf(txtPatientId.getText())
                + "\n\nHospital Id:  " + String.valueOf(txtHospitalId.getText())
                + "\n\nMedicines:  " + txtMecine.getText()
                + "\n\nAmount:  " + txtAmount.getText()
        );
        
        populatePharmacistWorkQueue(account, ecosystem);

    }//GEN-LAST:event_btnViewInvoiceActionPerformed

    private void btnViewPrescriptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewPrescriptionsActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPharmacistWorkQueue.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this,
                    "Please select the request first", "ERROR",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) tblPharmacistWorkQueue.getModel();
             prescriptionWorkRequest
                    = (PrescriptionWorkRequest) model.getValueAt(selectedRowIndex, 0);

            selectedPatient = prescriptionWorkRequest.getPatient();
            Prescription pr = prescriptionWorkRequest.getPrescription();
            prescriptionWorkRequest.setReceiver(account);
            

            txtDocRef.setText(String.valueOf(prescriptionWorkRequest.getPrescription().getDocRefNo()));
            txtPatientId.setText(String.valueOf(prescriptionWorkRequest.getPrescription().getPatientId()));
            txtPharmacyId.setText(String.valueOf(pharmacyEnterprise.getEnterpriseId()));
            txtHospitalId.setText(String.valueOf(prescriptionWorkRequest.getPrescription().getHospitalId()));
            txtMecine.setText(prescriptionWorkRequest.getPrescription().getMedicinePrescribed());
        }
        
        populatePharmacistWorkQueue(account, ecosystem);


    }//GEN-LAST:event_btnViewPrescriptionsActionPerformed

    private void txtPatientIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientIdActionPerformed

    private void txtPharmacyIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPharmacyIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPharmacyIdActionPerformed

    private void btnSendRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendRequestActionPerformed
        // TODO add your handling code here:
        for (Network network : ecosystem.getRootNetwork().getSubNetworkDirectory().getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof InsuranceEnterprise) {                  
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.INSURANCE.getValue())) {
                            
                          
                            prescriptionWorkRequest.setStatus(WorkRequestStatus.Status.IN_PROGRESS.getValue());
                            prescriptionWorkRequest.getEncounter().setPharmacyAmount(Double.parseDouble(txtAmount.getText()));
                            JOptionPane.showMessageDialog(this, "Request sent successfully to insurance", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
   
                            organization.getWorkQueue().getWorkrequest().add(prescriptionWorkRequest);
                            populatePharmacistWorkQueue(account, ecosystem);
                            return;
                        }
                    }
                }
            }
        }
        
        
       JOptionPane.showMessageDialog(this, "Failed to sent request to insurance", "FAIL", JOptionPane.ERROR_MESSAGE);
       populatePharmacistWorkQueue(account, ecosystem);
       

    }//GEN-LAST:event_btnSendRequestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSendRequest;
    private javax.swing.JButton btnViewInvoice;
    private javax.swing.JButton btnViewPrescriptions;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblDocRef;
    private javax.swing.JLabel lblHospitalId;
    private javax.swing.JLabel lblMedicine;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JLabel lblPharmacyId;
    public static javax.swing.JTable tblPharmacistWorkQueue;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextArea txtAreaPrescription;
    private javax.swing.JTextField txtDocRef;
    private javax.swing.JTextField txtHospitalId;
    private javax.swing.JTextField txtMecine;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtPharmacyId;
    // End of variables declaration//GEN-END:variables

}
