/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.project.ui.hospital;

import com.project.bloodbank.BloodBankEnterprise;
import com.project.bloodbank.BloodPaletteDetails;
import com.project.constants.WorkRequestStatus;
import com.project.ecosystem.Ecosystem;
import com.project.enterprise.Enterprise;
import com.project.healthcare.LaboratoryOrganization;
import com.project.insurance.InsuranceEnterprise;
import com.project.network.Network;
import com.project.organization.Organization;
import com.project.ui.bloodbank.BloodInventoryManagerWorkAreaPanel;
import com.project.useraccount.UserAccount;
import com.project.utils.Utils;
import com.project.workqueue.BloodWorkRequest;
import com.project.workqueue.LabAssistantProcessingWorkRequest;
import com.project.workqueue.NurseProcessingWorkRequest;
import com.project.workqueue.WorkRequest;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Anjali
 */
public class BloodLabAssistantWorkAreaJpanel extends javax.swing.JPanel {

    /**
     * Creates new form BloodLabAssWorkAreaJpanel
     */
    JPanel containerPanel;
    UserAccount account;
    Enterprise enterprise;
    Ecosystem business;

    public BloodLabAssistantWorkAreaJpanel(JPanel containerPanel, UserAccount account, Enterprise enterprise, Ecosystem business) {
        initComponents();
        this.containerPanel = containerPanel;
        this.account = account;
        this.enterprise = enterprise;
        this.business = business;
        populateLabWorkQueue();
        populateBloodInventory();
        populatefreeJCharts();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populateLabWorkQueue() {
        DefaultTableModel model = (DefaultTableModel) tblDoner.getModel();
        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.LABORATORY.getValue())) {
                for (WorkRequest workRequest : organization.getWorkQueue().getWorkrequest()) {
                    LabAssistantProcessingWorkRequest lapw = (LabAssistantProcessingWorkRequest) workRequest;
                    Object[] row = new Object[3];
                    row[0] = lapw;
                    row[1] = lapw.getDoner();
                    row[2] = lapw.getStatus();
                    row[3] = lapw.getLastVisitedDate();

                    model.addRow(row);
                }
            }
        }

    }
    
    public void populateBloodInventory() {
        DefaultTableModel model = (DefaultTableModel) tblBloodmanage.getModel();
        model.setRowCount(0);

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.LABORATORY.getValue())) {
                LaboratoryOrganization labOrg = (LaboratoryOrganization) organization;
                for(BloodPaletteDetails bpd: labOrg.getBloodInventory()) {
                    Object[] row = new Object[3];
                    row[0] = bpd;
                    row[1] = bpd.getcountUnitOfBlood();
                    row[2] = bpd.getLastStockedDate() == null ? Utils.getRandomDate() : bpd.getLastStockedDate().toString();
                    
                    model.addRow(row);
                }   
            }
        }
    }
    
    public void populatefreeJCharts()
    {
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.LABORATORY.getValue())) {
                LaboratoryOrganization labOrg = (LaboratoryOrganization) organization;
                for(BloodPaletteDetails bpd: labOrg.getBloodInventory()) {
                    dataset.addValue(bpd.getcountUnitOfBlood(), bpd.getBloodUnit().getBloodType(), bpd.getBloodUnit().getBloodType().getValue());
                }   
            }
        }
        
        final JFreeChart chart = ChartFactory.createBarChart(
            "Blood Distribution", 
            "Blood count",
            "Type",
            dataset,
            PlotOrientation.VERTICAL,
            true,
            true,
            false
        );
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setDomainZoomable(true);
        jPanelChart.setLayout(new BorderLayout());
        jPanelChart.add(chartPanel, BorderLayout.CENTER);
        jPanelChart.setVisible(true); 
    }   
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoner = new javax.swing.JTable();
        btnProcess = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBloodmanage = new javax.swing.JTable();
        btnRequestBlood = new javax.swing.JButton();
        jPanelChart = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblDoner.setBackground(new java.awt.Color(252, 246, 245));
        tblDoner.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request id", "DonerName", "Status", "Last Visited"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDoner);

        btnProcess.setBackground(new java.awt.Color(174, 14, 54));
        btnProcess.setForeground(new java.awt.Color(255, 255, 255));
        btnProcess.setText("Proceed");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1085, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(121, 121, 121))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Donor BloodRequest", jPanel1);

        tblBloodmanage.setBackground(new java.awt.Color(252, 246, 245));
        tblBloodmanage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blood Type", "Unit", "Last Restocked Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblBloodmanage);

        btnRequestBlood.setBackground(new java.awt.Color(174, 14, 54));
        btnRequestBlood.setForeground(new java.awt.Color(255, 255, 255));
        btnRequestBlood.setText("REQUEST BLOOD");
        btnRequestBlood.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestBloodActionPerformed(evt);
            }
        });

        jPanelChart.setOpaque(false);

        javax.swing.GroupLayout jPanelChartLayout = new javax.swing.GroupLayout(jPanelChart);
        jPanelChart.setLayout(jPanelChartLayout);
        jPanelChartLayout.setHorizontalGroup(
            jPanelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 751, Short.MAX_VALUE)
        );
        jPanelChartLayout.setVerticalGroup(
            jPanelChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRequestBlood, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jPanelChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelChart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnRequestBlood, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Blood Manage", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblDoner.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select Doner to start LabWork", "No selection", JOptionPane.ERROR_MESSAGE);
        } else {
            LabAssistantProcessingWorkRequest selectedlapw = (LabAssistantProcessingWorkRequest) tblDoner.getValueAt(selectedRow, 0);
            selectedlapw.setStatus(WorkRequestStatus.Status.COMPLETED.getValue());
        }


    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnRequestBloodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestBloodActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblBloodmanage.getSelectedRow();
        populatefreeJCharts();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select blood palette details ", "No selection", JOptionPane.ERROR_MESSAGE);
        } else {
            BloodPaletteDetails bpd = (BloodPaletteDetails) tblBloodmanage.getValueAt(selectedRow, 0);
            BloodWorkRequest br = new BloodWorkRequest(account, null, "Request blood",bpd.getBloodUnit().getBloodType(), new Random().nextInt(10)+1);
            
            for (Network network : business.getRootNetwork().getSubNetworkDirectory().getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof BloodBankEnterprise) {                  
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.BLOODBANKINVENTORY.getValue())) {
                            br.setStatus(WorkRequestStatus.Status.CREATED.getValue());
                            organization.getWorkQueue().getWorkrequest().add(br);
                            JOptionPane.showMessageDialog(this, "Request successfully sent to :" + organization.getName(), " SUCCESS ", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                    }
                }
            }
        }
            
        }
        
    }//GEN-LAST:event_btnRequestBloodActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnRequestBlood;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelChart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblBloodmanage;
    private javax.swing.JTable tblDoner;
    // End of variables declaration//GEN-END:variables
}
