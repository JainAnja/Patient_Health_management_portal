/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.project.ui.bloodbank;

import com.project.bloodbank.BloodBankEnterprise;
import com.project.bloodbank.BloodInventoryOrganization;
import com.project.bloodbank.BloodPaletteDetails;
import com.project.constants.WorkRequestStatus;
import com.project.ecosystem.Ecosystem;
import com.project.enterprise.Enterprise;
import com.project.healthcare.LaboratoryOrganization;
import com.project.insurance.InsuranceEnterprise;
import com.project.network.Network;
import com.project.organization.Organization;
import com.project.useraccount.UserAccount;
import com.project.workqueue.BloodWorkRequest;
import com.project.workqueue.WorkRequest;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author stutisingh
 */
public class BloodInventoryManagerWorkAreaPanel extends javax.swing.JPanel {

    JPanel containerPanel;
    Ecosystem business;
    Organization patientOrganization;
    Organization donorOrganization;
    UserAccount account;
    Enterprise loggedInEnterprise;
    Network currentNetwork;
    BloodWorkRequest selectedBWR;

    /**
     * Creates new form BloodInventoryManagerWorkAreaPanels
     */
    public BloodInventoryManagerWorkAreaPanel(JPanel containerPanel, UserAccount account, Ecosystem business, Enterprise enterprise) {
        initComponents();
        initComponents();
        this.containerPanel = containerPanel;
        this.business = business;
        this.account = account;
        this.loggedInEnterprise = enterprise;
        populateBloodWorkQueue();
//        tblBloodInventory.setVisible(false);
//        tblExternalNetwork.setVisible(false);
        jLayInventory.setVisible(false);
        jLayExternalNetwork.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayExternalNetwork = new javax.swing.JLayeredPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblExternalNetwork = new javax.swing.JTable();
        btnSendBWRExternally = new javax.swing.JButton();
        jLayInventory = new javax.swing.JLayeredPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBloodInventory = new javax.swing.JTable();
        jLayWorkQueue = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBloodUnitWorkQueue = new javax.swing.JTable();
        btnSearchExternalNetwork = new javax.swing.JButton();
        btnCheckInventory = new javax.swing.JButton();
        btnApproveBWR = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1100, 800));

        tblExternalNetwork.setBackground(new java.awt.Color(252, 246, 245));
        tblExternalNetwork.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Network", "Enterprise Name", "BloodType", "Quantity", "Last Stock Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblExternalNetwork);

        btnSendBWRExternally.setBackground(new java.awt.Color(174, 14, 54));
        btnSendBWRExternally.setForeground(new java.awt.Color(255, 255, 255));
        btnSendBWRExternally.setText("Send Blood Work Request");
        btnSendBWRExternally.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendBWRExternallyActionPerformed(evt);
            }
        });

        jLayExternalNetwork.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayExternalNetwork.setLayer(btnSendBWRExternally, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayExternalNetworkLayout = new javax.swing.GroupLayout(jLayExternalNetwork);
        jLayExternalNetwork.setLayout(jLayExternalNetworkLayout);
        jLayExternalNetworkLayout.setHorizontalGroup(
            jLayExternalNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayExternalNetworkLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayExternalNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSendBWRExternally)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jLayExternalNetworkLayout.setVerticalGroup(
            jLayExternalNetworkLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayExternalNetworkLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSendBWRExternally)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        tblBloodInventory.setBackground(new java.awt.Color(252, 246, 245));
        tblBloodInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blood Type", "Stock Quantity", "Last Stocked Date"
            }
        ));
        jScrollPane2.setViewportView(tblBloodInventory);

        jLayInventory.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayInventoryLayout = new javax.swing.GroupLayout(jLayInventory);
        jLayInventory.setLayout(jLayInventoryLayout);
        jLayInventoryLayout.setHorizontalGroup(
            jLayInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayInventoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jLayInventoryLayout.setVerticalGroup(
            jLayInventoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayInventoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        tblBloodUnitWorkQueue.setBackground(new java.awt.Color(252, 246, 245));
        tblBloodUnitWorkQueue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Blood Type", "Unit Count", "Lab Asst Name", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblBloodUnitWorkQueue);

        btnSearchExternalNetwork.setBackground(new java.awt.Color(174, 14, 54));
        btnSearchExternalNetwork.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchExternalNetwork.setText("Search in External Network");
        btnSearchExternalNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchExternalNetworkActionPerformed(evt);
            }
        });

        btnCheckInventory.setBackground(new java.awt.Color(174, 14, 54));
        btnCheckInventory.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckInventory.setText("Check Inventory");
        btnCheckInventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckInventoryActionPerformed(evt);
            }
        });

        btnApproveBWR.setBackground(new java.awt.Color(174, 14, 54));
        btnApproveBWR.setForeground(new java.awt.Color(255, 255, 255));
        btnApproveBWR.setText("Approve");
        btnApproveBWR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveBWRActionPerformed(evt);
            }
        });

        jLayWorkQueue.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayWorkQueue.setLayer(btnSearchExternalNetwork, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayWorkQueue.setLayer(btnCheckInventory, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayWorkQueue.setLayer(btnApproveBWR, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayWorkQueueLayout = new javax.swing.GroupLayout(jLayWorkQueue);
        jLayWorkQueue.setLayout(jLayWorkQueueLayout);
        jLayWorkQueueLayout.setHorizontalGroup(
            jLayWorkQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayWorkQueueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayWorkQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLayWorkQueueLayout.createSequentialGroup()
                        .addComponent(btnCheckInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearchExternalNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnApproveBWR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jLayWorkQueueLayout.setVerticalGroup(
            jLayWorkQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayWorkQueueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jLayWorkQueueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchExternalNetwork)
                    .addComponent(btnCheckInventory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApproveBWR)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLayWorkQueue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLayExternalNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLayInventory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLayWorkQueue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addComponent(jLayExternalNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayInventory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void showInventoryTable() {
        jLayInventory.setVisible(true);

    }

    private void btnCheckInventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckInventoryActionPerformed
        showInventoryTable();
        populateBloodInventory();
    }//GEN-LAST:event_btnCheckInventoryActionPerformed

    public void populateBloodWorkQueue() {
        DefaultTableModel model = (DefaultTableModel) tblBloodUnitWorkQueue.getModel();
        model.setRowCount(0);

        for (Organization organization : loggedInEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.BLOODBANKINVENTORY.getValue())) {
                for (WorkRequest workRequest : organization.getWorkQueue().getWorkrequest()) {
                    BloodWorkRequest bwr = (BloodWorkRequest) workRequest;
                    Object[] row = new Object[4];
                    row[0] = bwr;
                    row[1] = bwr.getBloodUnitCount();
                    row[2] = bwr.getSender();
                    row[3] = bwr.getStatus();
                    model.addRow(row);
                }
            }

        }

    }

    public void populateBloodInventory() {
        DefaultTableModel model = (DefaultTableModel) tblBloodInventory.getModel();
        model.setRowCount(0);

        for (Organization organization : loggedInEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.BLOODBANKINVENTORY.getValue())) {
                BloodInventoryOrganization bio = (BloodInventoryOrganization) organization;
                for (BloodPaletteDetails bpd : bio.getBloodPaletteList()) {
                    Object[] row = new Object[3];
                    row[0] = bpd;
                    row[1] = bpd.getcountUnitOfBlood();
                    //row[2] = bpd.getLastStockedDate().toString() == "" ? new Date() : bpd.getLastStockedDate().toString();
                    row[2] = bpd.getLastStockedDate() == null ? new Date() : bpd.getLastStockedDate().toString();
                    model.addRow(row);
                }
            }
        }
    }

    private void btnApproveBWRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveBWRActionPerformed
        int selectedRow = tblBloodUnitWorkQueue.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a work request to approve", "No selection", JOptionPane.ERROR_MESSAGE);
        } else {
            BloodWorkRequest blwr = (BloodWorkRequest) tblBloodUnitWorkQueue.getValueAt(selectedRow, 0);
            blwr.setStatus(WorkRequestStatus.Status.COMPLETED.getValue());
            JOptionPane.showMessageDialog(this, "Blood Request Approved for id : " + blwr.getRequestId(), "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
            populateBloodWorkQueue();
        }
    }//GEN-LAST:event_btnApproveBWRActionPerformed

    private void showExternalNetwork() {
        jLayExternalNetwork.setVisible(true);
        populateExternalNetwork();

    }

    private void btnSearchExternalNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchExternalNetworkActionPerformed

        int selectedRow = tblBloodUnitWorkQueue.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a blood work request to search externally", "No selection", JOptionPane.ERROR_MESSAGE);
        } else {
            WorkRequest selectedWR = (WorkRequest) tblBloodUnitWorkQueue.getValueAt(selectedRow, 0);
            BloodWorkRequest selectedBWR = (BloodWorkRequest) selectedWR;
            selectedBWR.setStatus(WorkRequestStatus.Status.IN_PROGRESS.getValue());

            showExternalNetwork();
        }


    }//GEN-LAST:event_btnSearchExternalNetworkActionPerformed

    public void populateExternalNetwork() {
        int selectedRow = tblBloodUnitWorkQueue.getSelectedRow();
        WorkRequest selectedWR = (WorkRequest) tblBloodUnitWorkQueue.getValueAt(selectedRow, 0);
        BloodWorkRequest selectedBWR = (BloodWorkRequest) selectedWR;
        DefaultTableModel model = (DefaultTableModel) tblExternalNetwork.getModel();
        model.setRowCount(0);
        for (Network network : business.getRootNetwork().getSubNetworkDirectory().getNetworkList()) {
            for (Enterprise extEnterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (extEnterprise instanceof BloodBankEnterprise && !extEnterprise.getEnterpriseName().equalsIgnoreCase(loggedInEnterprise.getEnterpriseName())) {
                    for (Organization organization : extEnterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.BLOODBANKINVENTORY.getValue())) {
                            BloodInventoryOrganization bio = (BloodInventoryOrganization) organization;
                            for (BloodPaletteDetails bpd : bio.getBloodPaletteList()) {
                                if (bpd.getBloodUnit().getBloodType().getValue().equalsIgnoreCase(selectedBWR.getBloodType().getValue())) {
                                    Object[] row = new Object[5];
                                    row[0] = network;
                                    row[1] = extEnterprise;
                                    row[2] = bpd;
                                    row[3] = bpd.getcountUnitOfBlood();
                                    row[4] = bpd.getLastStockedDate() == null ? new Date() : bpd.getLastStockedDate().toString();
                                    model.addRow(row);
                                }
                            }
                        }
                    }

                }
            }
        }

    }


    private void btnSendBWRExternallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendBWRExternallyActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblBloodUnitWorkQueue.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select work request to send externally", "No selection", JOptionPane.ERROR_MESSAGE);
        } else {
            WorkRequest selectedWR = (WorkRequest) tblBloodUnitWorkQueue.getValueAt(selectedRow, 0);
            BloodWorkRequest selectedBWR = (BloodWorkRequest) selectedWR;

            int selectedNetworkRow = tblExternalNetwork.getSelectedRow();
            if (selectedNetworkRow < 0) {
                JOptionPane.showMessageDialog(null, "Please select work request to send externally", "No selection", JOptionPane.ERROR_MESSAGE);
            } else {
                Enterprise ent = (Enterprise) tblExternalNetwork.getValueAt(selectedNetworkRow, 1);

                for (Organization organization : ent.getOrganizationDirectory().getOrganizationList()) {
                    if (organization.getOrganizationType().equalsIgnoreCase(Organization.Type.BLOODBANKINVENTORY.getValue())) {
                        int extQty = (int) tblExternalNetwork.getValueAt(selectedNetworkRow, 3);
                        if (extQty < selectedBWR.getBloodUnitCount()) {
                            JOptionPane.showMessageDialog(null, "Selected external bank does have enough quantity to match your need. Please check again in future.", "NOT ENOUGH BLOOD SUPPLY", JOptionPane.INFORMATION_MESSAGE);
                            selectedBWR.setStatus(WorkRequestStatus.Status.IN_PROGRESS.getValue());
                        } else {
                            selectedBWR.setStatus(WorkRequestStatus.Status.IN_EXTERNAL_NETWORK_PROGRESS.getValue());
                            organization.getWorkQueue().getWorkrequest().add(selectedBWR);
                            JOptionPane.showMessageDialog(null, "Blood Work Request has been transferred to external bloodbank", "REQUEST TRANSFER", JOptionPane.INFORMATION_MESSAGE);
                            populateBloodWorkQueue();
                            return;
                        }
                    }

                }
            }
        }
    }//GEN-LAST:event_btnSendBWRExternallyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApproveBWR;
    private javax.swing.JButton btnCheckInventory;
    private javax.swing.JButton btnSearchExternalNetwork;
    private javax.swing.JButton btnSendBWRExternally;
    private javax.swing.JLayeredPane jLayExternalNetwork;
    private javax.swing.JLayeredPane jLayInventory;
    private javax.swing.JLayeredPane jLayWorkQueue;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblBloodInventory;
    private javax.swing.JTable tblBloodUnitWorkQueue;
    private javax.swing.JTable tblExternalNetwork;
    // End of variables declaration//GEN-END:variables

}
