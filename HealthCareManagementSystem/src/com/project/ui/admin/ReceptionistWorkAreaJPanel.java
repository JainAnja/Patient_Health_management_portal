/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.project.ui.admin;

import com.project.donor.DonorProfile;
import com.project.enterprise.Enterprise;
import com.project.organization.Organization;
import com.project.patient.PatientProfile;
import com.project.person.Person;
import com.project.useraccount.UserAccount;
import com.project.utils.Validation;
import com.project.workqueue.LabAssistantProcessingWorkRequest;
import com.project.workqueue.NurseProcessingWorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Anjali
 */
public class ReceptionistWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReceptionistWorkAreaJPanel
     */
    JPanel containerPanel;
    Enterprise enterprise;
    Organization patientOrganization;
    Organization donorOrganization;
    PatientProfile selectedPatient;
    DonorProfile selectedDonor;
    UserAccount account;

    public ReceptionistWorkAreaJPanel(JPanel containerPanel, UserAccount account, Enterprise enterprise) {
        initComponents();
        this.containerPanel = containerPanel;
        this.enterprise = enterprise;
        this.account = account;

        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getOrganizationType().equalsIgnoreCase(Organization.Type.PATIENT.getValue())) {
                patientOrganization = org;
            }

            if (org.getOrganizationType().equalsIgnoreCase(Organization.Type.DONOR.getValue())) {
                donorOrganization = org;
            }
        }

        hideFields();
        populateTablePatient(patientOrganization.getPersonDirectory().getPersonList()); //List<Person>
        populateTableDonor(donorOrganization.getPersonDirectory().getPersonList()); //List<Person>
    }

    public void populateTablePatient(List<Person> persons) {
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        for (Person person : persons) {
            PatientProfile patient = (PatientProfile) person;
            Object[] row = new Object[5];
            row[0] = patient;
            if (patient.getEncounterHistory().getEncounters().size() > 0) {
                //for last visited date calling tostring of date from encounter class
                row[1] = patient.getEncounterHistory().getEncounters().get(patient.getEncounterHistory().getEncounters().size() - 1);
            } else {
                row[1] = "Not visited yet";
            }

            model.addRow(row);
        }
    }

    public void populateTableDonor(List<Person> persons) {
        DefaultTableModel model = (DefaultTableModel) tblDonor.getModel();
        model.setRowCount(0);
        for (Person person : persons) {
            DonorProfile donor = (DonorProfile) person;
            Object[] row = new Object[5];
            row[0] = donor;
            if (donor.getBloodDonationHistory().size() > 0) {
                //for last visited date calling tostring of date from encounter class
                row[1] = donor.getBloodDonationHistory().get(donor.getBloodDonationHistory().size() - 1);
            } else {
                row[1] = "Not visited yet";
            }

            model.addRow(row);
        }
    }

    public void hideFields() {

        jLblCriticality.setVisible(false);
       
        jLblPatientId.setVisible(false);
        jLblReason.setVisible(false);
        txtPatientId.setVisible(false);
        txtCriticality.setVisible(false);
        txtAreaReasonVisit.setVisible(false);
        jLayeredPane2.setVisible(false);
        btnAssign.setVisible(false);
    }

    public void showFields() {
        jLayeredPane2.setVisible(true);
        jLblCriticality.setVisible(true);

        jLblPatientId.setVisible(true);
        jLblReason.setVisible(true);
        txtPatientId.setVisible(true);
        txtCriticality.setVisible(true);
        txtAreaReasonVisit.setVisible(true);
        btnAssign.setVisible(true);

        txtPatientId.setText(String.valueOf(selectedPatient.getId()));
    }

    public void clearFields() {
        txtPatientId.setText("");
        txtCriticality.setText("");
        txtAreaReasonVisit.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageJpanel = new javax.swing.JTabbedPane();
        mangePatientJpanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        btnCreate = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        btnAssignNurse = new javax.swing.JButton();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLblPatientId = new javax.swing.JLabel();
        jLblCriticality = new javax.swing.JLabel();
        jLblReason = new javax.swing.JLabel();
        txtPatientId = new javax.swing.JTextField();
        txtCriticality = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaReasonVisit = new javax.swing.JTextArea();
        btnAssign = new javax.swing.JButton();
        btnSearchPatient = new javax.swing.JButton();
        manageDonorJpanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDonor = new javax.swing.JTable();
        btnRefreshDonor = new javax.swing.JButton();
        btnCreateDonor = new javax.swing.JButton();
        btnAssignLab = new javax.swing.JButton();

        mangePatientJpanel.setPreferredSize(new java.awt.Dimension(1100, 800));

        tblPatient.setBackground(new java.awt.Color(241, 244, 255));
        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Last Visited"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatient);

        btnCreate.setBackground(new java.awt.Color(174, 14, 54));
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setText("Add new Patient");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(174, 14, 54));
        btnRefresh.setForeground(new java.awt.Color(255, 255, 255));
        btnRefresh.setText("Display all patients");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        txtSearch.setText("Search patient");
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
        });

        btnAssignNurse.setBackground(new java.awt.Color(174, 14, 54));
        btnAssignNurse.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignNurse.setText("ASSIGN TO NURSE");
        btnAssignNurse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignNurseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 151, Short.MAX_VALUE)
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 49, Short.MAX_VALUE)
        );

        jLblPatientId.setText("Patient id");

        jLblCriticality.setText("Criticality:");

        jLblReason.setText("Reason of visit: ");

        txtPatientId.setEditable(false);
        txtPatientId.setPreferredSize(new java.awt.Dimension(10, 30));
        txtPatientId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientIdActionPerformed(evt);
            }
        });

        txtAreaReasonVisit.setColumns(20);
        txtAreaReasonVisit.setRows(5);
        jScrollPane2.setViewportView(txtAreaReasonVisit);

        btnAssign.setBackground(new java.awt.Color(174, 14, 54));
        btnAssign.setForeground(new java.awt.Color(255, 255, 255));
        btnAssign.setText("ASSIGN");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnSearchPatient.setBackground(new java.awt.Color(174, 14, 54));
        btnSearchPatient.setForeground(new java.awt.Color(255, 255, 255));
        btnSearchPatient.setText("Search");
        btnSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPatientActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mangePatientJpanelLayout = new javax.swing.GroupLayout(mangePatientJpanel);
        mangePatientJpanel.setLayout(mangePatientJpanelLayout);
        mangePatientJpanelLayout.setHorizontalGroup(
            mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mangePatientJpanelLayout.createSequentialGroup()
                .addGap(367, 367, 367)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(mangePatientJpanelLayout.createSequentialGroup()
                .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mangePatientJpanelLayout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblReason)
                            .addGroup(mangePatientJpanelLayout.createSequentialGroup()
                                .addGap(198, 198, 198)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mangePatientJpanelLayout.createSequentialGroup()
                                    .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLblPatientId)
                                        .addComponent(jLblCriticality))
                                    .addGap(60, 60, 60)
                                    .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                        .addComponent(txtCriticality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtPatientId, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))))))
                    .addGroup(mangePatientJpanelLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnCreate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRefresh))
                        .addGap(30, 30, 30)
                        .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSearchPatient)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 782, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mangePatientJpanelLayout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(btnAssignNurse)))
                .addContainerGap(136, Short.MAX_VALUE))
        );

        mangePatientJpanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCreate, btnRefresh});

        mangePatientJpanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane2, txtCriticality, txtPatientId});

        mangePatientJpanelLayout.setVerticalGroup(
            mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mangePatientJpanelLayout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mangePatientJpanelLayout.createSequentialGroup()
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAssignNurse, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblPatientId)
                    .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLblCriticality)
                    .addComponent(txtCriticality, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(mangePatientJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLblReason)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAssign)
                .addGap(33, 33, 33)
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
        );

        mangePatientJpanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAssign, btnAssignNurse, btnCreate, btnRefresh, btnSearchPatient, txtSearch});

        mangePatientJpanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtCriticality, txtPatientId});

        manageJpanel.addTab("Mange Patient", mangePatientJpanel);

        tblDonor.setBackground(new java.awt.Color(241, 244, 255));
        tblDonor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doner Name", "Last Visited"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblDonor);

        btnRefreshDonor.setBackground(new java.awt.Color(174, 14, 54));
        btnRefreshDonor.setForeground(new java.awt.Color(255, 255, 255));
        btnRefreshDonor.setText("Display all Donor");
        btnRefreshDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshDonorActionPerformed(evt);
            }
        });

        btnCreateDonor.setBackground(new java.awt.Color(174, 14, 54));
        btnCreateDonor.setForeground(new java.awt.Color(255, 255, 255));
        btnCreateDonor.setText("Add new Donor");
        btnCreateDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateDonorActionPerformed(evt);
            }
        });

        btnAssignLab.setBackground(new java.awt.Color(174, 14, 54));
        btnAssignLab.setForeground(new java.awt.Color(255, 255, 255));
        btnAssignLab.setText("ASSIGN TO LAB");
        btnAssignLab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignLabActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout manageDonorJpanelLayout = new javax.swing.GroupLayout(manageDonorJpanel);
        manageDonorJpanel.setLayout(manageDonorJpanelLayout);
        manageDonorJpanelLayout.setHorizontalGroup(
            manageDonorJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDonorJpanelLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addGroup(manageDonorJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRefreshDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCreateDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(manageDonorJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAssignLab, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(163, Short.MAX_VALUE))
        );
        manageDonorJpanelLayout.setVerticalGroup(
            manageDonorJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageDonorJpanelLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(manageDonorJpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(manageDonorJpanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAssignLab, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(manageDonorJpanelLayout.createSequentialGroup()
                        .addComponent(btnRefreshDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCreateDonor, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(534, Short.MAX_VALUE))
        );

        manageJpanel.addTab("Manage Donor", manageDonorJpanel);

        add(manageJpanel);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
//        *****************

        AddNewPatientPanel addnewPatient = new AddNewPatientPanel(containerPanel, enterprise);
        containerPanel.add(addnewPatient);
        CardLayout cardLayout = (CardLayout) containerPanel.getLayout();
        cardLayout.next(containerPanel);
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:

        populateTablePatient(patientOrganization.getPersonDirectory().getPersonList());
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchFocusGained

    private void btnAssignNurseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignNurseActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblPatient.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select patient to assign to nurse", "No selection", JOptionPane.ERROR_MESSAGE);
        } else {
            selectedPatient = (PatientProfile) tblPatient.getValueAt(selectedRow, 0);
            showFields();
        }
    }//GEN-LAST:event_btnAssignNurseActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        if(!Validation.validateTextFieldsForNumber(txtCriticality)) {
            JOptionPane.showMessageDialog(this, "Invalid criticality", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int criticality = Integer.parseInt(txtCriticality.getText());
        String reasonVisit = txtAreaReasonVisit.getText();

        NurseProcessingWorkRequest npwr = new NurseProcessingWorkRequest(account, null, reasonVisit, selectedPatient);
        npwr.setReceptionist(account.getPerson());
        npwr.setCriticality(criticality);

        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getOrganizationType().equalsIgnoreCase(Organization.Type.NURSE.getValue())) {
                org.getWorkQueue().getWorkrequest().add(npwr);
                break;
            }
        }

        JOptionPane.showMessageDialog(null, "Request sent successfully to " + Organization.Type.NURSE.getValue() + " ", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
        clearFields();
        hideFields();


    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnCreateDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateDonorActionPerformed
        // TODO add your handling code here:

        AddNewDonorPanel addnewDonor = new AddNewDonorPanel(containerPanel, enterprise);
        containerPanel.add(addnewDonor);
        CardLayout cardLayout = (CardLayout) containerPanel.getLayout();
        cardLayout.next(containerPanel);
    }//GEN-LAST:event_btnCreateDonorActionPerformed

    private void btnAssignLabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignLabActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblDonor.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select donor to start blood donation", "No selection", JOptionPane.ERROR_MESSAGE);
        } else {
            selectedDonor = (DonorProfile) tblDonor.getValueAt(selectedRow, 0);

        }

        LabAssistantProcessingWorkRequest labpwr = new LabAssistantProcessingWorkRequest(account, null, "", selectedDonor);

        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getOrganizationType().equalsIgnoreCase(Organization.Type.LABORATORY.getValue())) {
                org.getWorkQueue().getWorkrequest().add(labpwr);
                JOptionPane.showMessageDialog(null, "Request sent successfully to " + Organization.Type.LABORATORY.getValue() + " ", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
    }//GEN-LAST:event_btnAssignLabActionPerformed

    private void btnRefreshDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshDonorActionPerformed
        // TODO add your handling code here:

        populateTableDonor(donorOrganization.getPersonDirectory().getPersonList());
    }//GEN-LAST:event_btnRefreshDonorActionPerformed

    private void txtPatientIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientIdActionPerformed

    private void btnSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPatientActionPerformed
        // TODO add your handling code here:
        
        if(!Validation.validateTextFieldsForString(txtSearch)){
              JOptionPane.showMessageDialog(this, "Missing input field for search", "ERROR", JOptionPane.ERROR_MESSAGE);
              return;
        }
        
        List<Person> searchResults = new ArrayList<>();
        for(Person person: patientOrganization.getPersonDirectory().getPersonList()){
            if(person.getfName().equalsIgnoreCase(txtSearch.getText()) || person.getlName().equalsIgnoreCase(txtSearch.getText())) {
                searchResults.add(person);
            }
        }
        
        populateTablePatient(searchResults);
        
        if(searchResults.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No patient record found for search input ", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }        
    }//GEN-LAST:event_btnSearchPatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnAssignLab;
    private javax.swing.JButton btnAssignNurse;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnCreateDonor;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRefreshDonor;
    private javax.swing.JButton btnSearchPatient;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLabel jLblCriticality;
    private javax.swing.JLabel jLblPatientId;
    private javax.swing.JLabel jLblReason;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel manageDonorJpanel;
    private javax.swing.JTabbedPane manageJpanel;
    private javax.swing.JPanel mangePatientJpanel;
    private javax.swing.JTable tblDonor;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextArea txtAreaReasonVisit;
    private javax.swing.JTextField txtCriticality;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
